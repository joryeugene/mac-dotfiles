# Custom functions

## Function to backup config files
backup_configs() {
  local dotfiles_dir="$HOME/dotfiles"
  mkdir -p "$dotfiles_dir"

  local files=(
    "$HOME/.zshrc"
    "$HOME/.config/starship.toml"
    "$HOME/.config/nvim/init.lua"
    "$HOME/Library/Application Support/Cursor/User/profiles/48fc2b27/keybindings.json"
    "$HOME/Library/Application Support/Cursor/User/profiles/48fc2b27/settings.json"
    "$HOME/.config/karabiner/karabiner.json"
  )

  for file in "${files[@]}"; do
    if [ -f "$file" ]; then
      cp "$file" "$dotfiles_dir/$(basename "$file")"
      echo "Backed up $file"
    else
      echo "Warning: $file not found"
    fi
  done

  echo "Backup complete. Files saved in $dotfiles_dir"
}

function mkcd() {
  mkdir -p "$@" && cd "$_";
}

function path() {
  echo $PATH | tr ':' '\n' | nl
}

function backup() {
  cp "$1" "$1.bak"
  echo "Backup created: $1.bak"
}

function extract() {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2) tar xjf $1 ;;
      *.tar.gz) tar xzf $1 ;;
      *.bz2) bunzip2 $1 ;;
      *.rar) unrar e $1 ;;
      *.gz) gunzip $1 ;;
      *.tar) tar xf $1 ;;
      *.tbz2) tar xjf $1 ;;
      *.tgz) tar xzf $1 ;;
      *.zip) unzip $1 ;;
      *.Z) uncompress $1 ;;
      *.7z) 7z x $1 ;;
      *) echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

function search_and_edit() {
  local file=$(find . -type f -name "*$1*" | fzf)
  if [[ -n $file ]]; then
    $EDITOR "$file"
  else
    echo "No file found matching '$1'"
  fi
}

function mkvenv() {
  python3 -m venv venv && source venv/bin/activate
}

function cdp() {
  cd $(find ~/projects -type d -maxdepth 1 | fzf)
}

function update_all() {
  brew update && brew upgrade
  npm update -g
  pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip install -U
  nvim +PlugUpdate +qall
}

function copy_file_names() {
    ls -p | grep -v / | pbcopy
}

function new_project() {
  if [ $# -eq 0 ]; then
    echo "Please provide a project name"
    return 1
  fi

  mkdir -p ~/projects/$1 && cd ~/projects/$1
  git init
  touch README.md .gitignore
  echo "# $1" > README.md
  echo "Project $1 created and initialized"
}

function calmhive() {
  cd /Users/jory/Documents/calmhive

  # Count markdown files
  md_files=$(find . -name "*.md" | wc -l)

  # Count folders
  folders=$(find . -type d | wc -l)

  # Count total words in markdown files
  total_words=$(find . -name "*.md" -exec cat {} + | wc -w)

  echo "CalmHive Statistics:"
  echo "Markdown files: $md_files"
  echo "Folders: $folders"
  echo "Total words: $total_words"

  echo "Ready to enter CalmHive notes? (y/n)"
  read answer
  if [[ $answer != "y" ]]; then
    echo "CalmHive entry cancelled."
    return
  fi

  nvim /Users/jory/Documents/calmhive/hub.md
}

function start_project() {
    local project=$1
    local mode=$2
    local env=${3:-local}
    local repo=${4:-monohelix2}
    local rebuild=${5:-no}
    local root="/Users/jory/Documents/GitHub/$repo"

    # Keep existing check_git_changes and switch_branch functions

    build_and_run_docker() {
        local image_name=$1
        local dockerfile_path=$2
        local env_file=$3

        if [[ $rebuild == "yes" ]] || ! docker image inspect $image_name:latest &> /dev/null; then
            echo "Building $image_name Docker image..."
            # Create a temporary Dockerfile without the COPY whapp.env instruction
            sed '/COPY whapp.env/d' $dockerfile_path > "${dockerfile_path}.tmp"
            docker build -f "${dockerfile_path}.tmp" -t $image_name:latest .
            rm "${dockerfile_path}.tmp"
        else
            echo "Using existing $image_name Docker image..."
        fi

        echo "Running $image_name Docker container..."
        if [[ -n $env_file ]]; then
            docker run -d -p 8000:8000 --env-file $env_file $image_name:latest
        else
            docker run -d -p 8000:8000 $image_name:latest
        fi

        echo "Container started. You can access it at http://localhost:8000"
    }

    case $project in
        whapp)
            cd "$root/projects/whapp" || return
            check_git_changes

            if [[ $env == "dev" ]]; then
                switch_branch "dev"
            elif [[ $env == "prod" ]]; then
                switch_branch "main"
            fi

            if [[ $mode == "docker" ]]; then
                if [[ ! -f .local.env ]]; then
                    echo "Error: .local.env file not found. Please create it before building the Docker image."
                    return 1
                fi
                cp .local.env ../../whapp.env
                cd ../..
                build_and_run_docker "whapp" "./projects/whapp/Dockerfile" "./whapp.env"
                rm whapp.env
            else
                echo "Starting whapp in $env mode..."
                poetry run uvicorn app.main:app --reload
            fi
            ;;
        admin)
            cd "$root/projects/admin-dashboard" || return
            check_git_changes

            if [[ $env == "dev" ]]; then
                switch_branch "dev"
            elif [[ $env == "prod" ]]; then
                switch_branch "main"
            fi

            if [[ $mode == "docker" ]]; then
                build_and_run_docker "admin-dashboard" "./Dockerfile"
                echo "Admin dashboard container is now running. Access it at http://localhost:8000"
            else
                echo "Starting admin-dashboard in $env mode..."
                npm run dev
            fi
            ;;
        *)
            echo "Usage: start_project [whapp|admin] [dev|docker] [local|dev|prod] [monohelix|monohelix2] [rebuild]"
            echo "  Third argument defaults to local if not specified"
            echo "  Fourth argument defaults to monohelix2 if not specified"
            echo "  Fifth argument (rebuild) is optional, set to 'yes' to force rebuild of Docker image"
            ;;
    esac
}
